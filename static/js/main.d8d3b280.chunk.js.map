{"version":3,"sources":["logo.svg","serviceWorker.js","PlayerService/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","p","N","R","No","n","Promise","resolve","sort","Math","random","slice","Cric","state","arr","getit","PlayerService","then","a","setState","free","className","onClick","this","map","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,wICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAAMC,EAAI,CACN,CACIC,EAAI,QACJC,EAAI,UACJC,GAAK,KAET,CACIF,EAAI,KACJC,EAAI,UACJC,GAAK,KAET,CACIF,EAAI,QACJC,EAAI,UACJC,GAAK,KAET,CACIF,EAAI,MACJC,EAAI,UACJC,GAAK,KAET,CACIF,EAAI,SACJC,EAAI,gBACJC,GAAK,KAET,CACIF,EAAI,SACJC,EAAI,SACJC,GAAK,KAET,CACIF,EAAI,YACJC,EAAI,UACJC,GAAK,KAET,CACIF,EAAI,YACJC,EAAI,gBACJC,GAAK,KAET,CACIF,EAAI,QACJC,EAAI,SACJC,GAAK,KAET,CACIF,EAAI,gBACJC,EAAI,SACJC,GAAK,MAET,CACIF,EAAI,gBACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,aACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,cACJC,EAAI,SACJC,GAAK,MAET,CACIF,EAAI,oBACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,eACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,gBACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,kBACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,QACJC,EAAI,SACJC,GAAK,MAET,CACIF,EAAI,gBACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,cACJC,EAAI,gBACJC,GAAK,MAET,CACIF,EAAI,aACJC,EAAI,SACJC,GAAK,OAKE,iBAACC,EAAD,uDAAG,GAAH,OACbC,QAAQC,QAAQN,EAAEO,MAAK,iBAAM,GAAMC,KAAKC,YAAUC,MAAM,EAAGN,KCvGvDO,E,4MAEJC,MAAQ,CACJC,IAAM,I,EAGVC,MAAQ,WACJC,IAAgBC,MAAK,SAAAC,GACnB,EAAKC,SAAS,CACZL,IAAMI,Q,EAKdE,KAAK,WACH,EAAKD,SAAS,CACZL,IAAM,M,uDAIV,OACE,yBAAKO,UAAU,KACb,oDACA,4BAAQC,QAASC,KAAKR,OAAO,0CAAe,6BAAf,MAA2B,6BAA3B,YAA6C,6BAA7C,oBAC7B,yBAAKM,UAAU,QAEVE,KAAKV,MAAMC,IAAIU,KACd,gBACEtB,EADF,EACEA,EAAEC,EADJ,EACIA,EAAEC,EADN,EACMA,GADN,OAEM,yBAAKiB,UAAU,QAAO,gCAAQ,6BAAR,UACZnB,EAAE,6BADU,UAEZC,EAAE,6BAFU,YAGVC,EAAG,6BAHO,UAUlC,4BAAQkB,QAASC,KAAKH,MAAtB,qBAAsD,6BACjD,6BACL,yBAAKC,UAAU,MAAf,gC,GAzCaI,IAAMC,WAiDzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d8d3b280.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const p = [\r\n    {\r\n        N : \"Virat\",\r\n        R : \"Batsmen\",\r\n        No : \"1\"\r\n    },\r\n    {\r\n        N : \"AB\",\r\n        R : \"Batsmen\",\r\n        No : \"2\"\r\n    },\r\n    {\r\n        N : \"Finch\",\r\n        R : \"Batsmen\",\r\n        No : \"3\"\r\n    },\r\n    {\r\n        N : \"Dev\",\r\n        R : \"Batsmen\",\r\n        No : \"4\"\r\n    },\r\n    {\r\n        N : \"Shivam\",\r\n        R : \"All - Rounder\",\r\n        No : \"5\"\r\n    },\r\n    {\r\n        N : \"Chahal\",\r\n        R : \"Bowler\",\r\n        No : \"6\"\r\n    },\r\n    {\r\n        N : \"MannSingh\",\r\n        R : \"Batsmen\",\r\n        No : \"7\"\r\n    },\r\n    {\r\n        N : \"Moeen Ali\",\r\n        R : \"All - Rounder\",\r\n        No : \"8\"\r\n    },\r\n    {\r\n        N : \"Siraj\",\r\n        R : \"Bowler\",\r\n        No : \"9\"\r\n    },\r\n    {\r\n        N : \"Navdeep Saini\",\r\n        R : \"Bowler\",\r\n        No : \"10\"\r\n    },\r\n    {\r\n        N : \"Parthiv Patel\",\r\n        R : \"Wicket Keeper\",\r\n        No : \"11\"\r\n    },\r\n    {\r\n        N : \"Pawan Negi\",\r\n        R : \"All - Rounder\",\r\n        No : \"12\"\r\n    },\r\n    {\r\n        N : \"Umesh yadav\",\r\n        R : \"Bowler\",\r\n        No : \"13\"\r\n    },\r\n    {\r\n        N : \"Washington Sundar\",\r\n        R : \"All - Rounder\",\r\n        No : \"14\"\r\n    },\r\n    {\r\n        N : \"Chris Morris\",\r\n        R : \"All - Rounder\",\r\n        No : \"15\"\r\n    },\r\n    {\r\n        N : \"Josh Phillipe\",\r\n        R : \"Wicket Keeper\",\r\n        No : \"16\"\r\n    },\r\n    {\r\n        N : \"Pavan deshpande\",\r\n        R : \"All - Rounder\",\r\n        No : \"17\"\r\n    },\r\n    {\r\n        N : \"Steyn\",\r\n        R : \"Bowler\",\r\n        No : \"18\"\r\n    },\r\n    {\r\n        N : \"Shahbaz Ahema\",\r\n        R : \"All - Rounder\",\r\n        No : \"19\"\r\n    },\r\n    {\r\n        N : \"Isuru Udana\",\r\n        R : \"All - Rounder\",\r\n        No : \"20\"\r\n    },\r\n    {\r\n        N : \"Adam Zampa\",\r\n        R : \"Bowler\",\r\n        No : \"21\"\r\n    }\r\n];\r\n\r\n\r\nexport default (n=11) =>\r\n  Promise.resolve(p.sort(() => 0.5 - Math.random()).slice(0, n));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport PlayerService from \"./PlayerService\"\n\nclass Cric extends React.Component{\n\n  state = {\n      arr : []\n  };\n\n  getit = () => {\n      PlayerService().then(a => {\n        this.setState({\n          arr : a\n        });\n      });\n  }\n\n  free=()=>{\n    this.setState({\n      arr : []\n    })\n  }\nrender(){\n  return(\n    <div className=\"P\">\n      <h1>Playing 11 Generator</h1>\n      <button onClick={this.getit}><h2>Click Here <br></br>To <br></br>Generate <br></br> New Playing 11</h2></button>\n      <div className=\"info\">\n        {\n           this.state.arr.map(\n            ({\n              N,R,No\n            })=>( <div className=\"info\"><strong><br></br>\n                    Name : {N}<br></br>\n                    Role : {R}<br></br>\n                    Number : {No}<br></br>\n                    -</strong>\n                  </div>\n                )\n          )\n        }\n      </div>\n      <button onClick={this.free}>Close Application</button><br>\n      </br><br></br>\n      <div className=\"en\">*A Sample React Project</div>\n    </div>\n  );\n}\n\n\n}\n\nReactDOM.render(<Cric />,document.getElementById(\"root\"))"],"sourceRoot":""}